import telebotapi
from telebotapi import types
import sqlite3
import requests
import keyring #---- –≤ –±—É–¥—É—â–µ–º –∑–∞–ø—Ä—è—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø–∞—Ä–æ–ª—å
import logging
import datetime
import os

bot = telebotapi.TBot(token)

#class Logger(): #--------------------------------------------------–ø–æ–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –±—É–¥–µ—Ç –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
 #   date = datetime.now().date().isoformat()

  #  def __init__(self, filename):
   #     if 'logs' not in os.listdir():
    ##   self.log = open('.\\logs\\{}'.format(filename + '_' + self.date + '.log'), 'a')
 #-- –≤–æ—Ç —Ç—É—Ç –±—É–¥—É—Ç –ª–æ–¥–∂–∏–Ω–≥–∏
# log = Logger('Telebot_Log')

class Database:
    def __init__(self, database):
        self.connection = sqlite3.connect(database)
        self.cursor = self.connection.cursor()

    def start_db(self, user_id, first_name, last_name):
        self.cursor.execute("INSERT OR IGNORE INTO users (id, first_name, last_name, IsAdmin) VALUES (%d,'%s', '%s', 0)" % (
            user_id, first_name, last_name))
        self.connection.commit()

    def admin_check(self):
        admin_list = {}
        self.cursor.execute("SELECT Id FROM users WHERE IsAdmin = 1")
        for line in self.cursor:
            admin_list[line[0]] = {}
            admin_list[line[0]]['Id'] = line[0]
        return list(dict.keys(admin_list))

    def admin_login_password_check(self, user_id):
        admin_login_list = {}
        self.cursor.execute("SELECT user_id, login, password FROM admin_authtorization")
        for line in self.cursor:
            admin_login_list[line[0]] = {}
            admin_login_list[line[0]]['user_id'] = line[0]
            admin_login_list[line[0]]['login'] = line[1]
            admin_login_list[line[0]]['password'] = line[2]
        return admin_login_list[user_id]

    def admin_add(self, userID, login, password):
        self.cursor.execute("INSERT OR IGNORE INTO admin_authtorization (user_id, login, password) VALUES (%d,'%s','%s')" %(userID, login, password))
        self.cursor.execute("UPDATE users SET IsAdmin = 1 WHERE Id = %d" %userID)
        self.connection.commit()

    def theme_write_in_data(self, category, user_id):
        self.cursor.execute("INSERT INTO categories (user_id, category) VALUES (%d,'%s')" % (
            user_id, category))
        self.connection.commit()

    def theme_choises(self, user_id):
        spisok = []
        callback_spisok = []
        choises_list = {}
        self.cursor.execute(
            """SELECT CallbackData, CategoryName FROM admin_categories acat
            LEFT JOIN categories cat on acat.CallbackData = cat.category
            WHERE cat.user_id = %d
            """ % user_id)
        for line in self.cursor:
            choises_list[line[0]] = {}
            choises_list[line[0]]['CallbackData'] = line[0]
            choises_list[line[0]]['CategoryName'] = line[1]
        check_category = dict.values(choises_list)
        for elem in check_category:
            spisok.append(elem['CategoryName'])
            callback_spisok.append(elem['CallbackData'])
        return spisok, callback_spisok

    def necessary_subscription(self, user_id):
        spisok = []
        sub_list = {}
        self.cursor.execute(
            """SELECT DISTINCT(fan.fandom) as fandom FROM category_subscriptions_binding csb
            JOIN categories cat on csb.category_id = cat.category
            JOIN fandoms_subscriptions_binding fsb on csb.subscription_id = fsb.subscription_id
            JOIN fandoms fan on fsb.fandom_name = fan.fandom_name
            WHERE user_id = %d
            """ % user_id)
        for line in self.cursor:
            sub_list[line[0]] = {}
            sub_list[line[0]]['fandom'] = line[0]
        check = dict.values(sub_list)
        for elem in check:
            spisok.append(elem['fandom'])
        return spisok

    def get_chat_id_by_check_subscription(self, user_id):
        spisok = []
        sub_list = {}
        self.cursor.execute(
            """SELECT DISTINCT(fandom_id) FROM category_subscriptions_binding csb
            JOIN categories cat on csb.category_id = cat.category
            JOIN fandoms_subscriptions_binding fsb on csb.subscription_id = fsb.subscription_id
            JOIN fandoms fan on fsb.fandom_name = fan.fandom_name
            WHERE user_id=%d
            """ % user_id)

        for line in self.cursor:
            sub_list[line[0]] = {}
            sub_list[line[0]]['fandom_id'] = line[0]

        check = dict.values(sub_list)
        for elem in check:
            spisok.append(elem['fandom_id'])
        return spisok

    def give_web_and_name_for_subscriptions(self, user_id):
        spisok_theme = []
        spisok_web = []
        sub_list = {}
        self.cursor.execute(
            """SELECT theme_name, groups FROM subscriptions
            WHERE groups in (SELECT DISTINCT(groups) FROM subscriptions s
            JOIN category_subscriptions_binding csb on s.theme_id = csb.subscription_id
            JOIN categories cat on csb.category_id = cat.category
            WHERE user_id = %d)
            """ % user_id)
        for line in self.cursor:
            sub_list[line[0]] = {}
            sub_list[line[0]]['theme_name'] = line[0]
            sub_list[line[0]]['groups'] = line[1]
        check = dict.values(sub_list)
        for elem in check:
            spisok_theme.append(elem['theme_name'])
            spisok_web.append(elem['groups'])
        return spisok_theme, spisok_web

    def delete_categories(self, user_id):
        self.cursor.execute('DELETE from categories WHERE user_id = %d' % user_id)
        self.connection.commit()

class Keyboards:

    def __init__(self, keyboard):
        self.keyboard = keyboard

    def user_first_menu(self): #------------------------ —Ä–µ—à–∏—Ç—å —Å—É–∫–∞ –ø—Ä–æ–±–µ–ª–º—É —Å –∫–ª–∞–≤–∏—à–∞–º–∏
        self.keyboard = types.InlineKeyboardMarkup()
        self.keyboard.add(
            types.InlineKeyboardButton(text="üé•–§–∏–ª—å–º—ã", callback_data="key1"),
            types.InlineKeyboardButton(text="üé¨–°–µ—Ä–∏–∞–ª—ã", callback_data="key2"),
            types.InlineKeyboardButton(text="üìö–ö–Ω–∏–≥–∏", callback_data="key3")
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text="‚ù§K-Pop", callback_data="key4"),
            types.InlineKeyboardButton(text="ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–º–∏–∫—Å—ã", callback_data="key5")
            #–ø—É—Å—Ç–æ–µ
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text="üéÆ–ò–≥—Ä—ã", callback_data="key6"),
            types.InlineKeyboardButton(text="üáØüáµ–ê–Ω–∏–º–µ", callback_data="key7")
            #types.InlineKeyboardButton(text="–ö–æ—Å–ø–ª–µ–π", callback_data="key8")
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text='–Ø –≤—ã–±—Ä–∞–ª –≤—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–Ω–µ —Ç–µ–º–∞—Ç–∏–∫–∏', callback_data='first_step_continue')
        )
        return self.keyboard

    def user_second_menu(self):
        self.keyboard = types.InlineKeyboardMarkup()
        self.keyboard.add(
            types.InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã‚úÖ", callback_data="second_step_continue")
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫–∏‚ùå', callback_data='second_step_back')
        )
        return self.keyboard

    def user_second_back_choice(self):
        self.keyboard = types.InlineKeyboardMarkup()
        self.keyboard.add(
            types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–∞—Ç–∏–∫–∏', callback_data='second_step_back_add'),
            types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏', callback_data='second_step_back_delete')
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚ùå', callback_data='first_step_continue')
        )
        return self.keyboard

    def hypersilki(self, names, web):
        keyboard = types.InlineKeyboardMarkup()
        count = 0
        for name, webs in zip(names, web):
            count += 1
            keyboard.add(
                types.InlineKeyboardButton(text=name, url=str(webs))
            )
            if count == 5:
                break
        keyboard.add(
            types.InlineKeyboardButton(text='–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å‚û°Ô∏è', callback_data='hyper_step_full'),
            types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚ùå', callback_data='first_step_continue')
        )
        return keyboard

    def hypersilki_full(self, names, web):
        keyboard = types.InlineKeyboardMarkup()
        for name, webs in zip(names, web):
            keyboard.add(
                types.InlineKeyboardButton(text=name, url=str(webs))
            )
        keyboard.add(
            types.InlineKeyboardButton(text='–°–≤–µ—Ä–Ω—É—Ç—å‚ùå', callback_data='second_step_continue'),
            types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚ùå', callback_data='first_step_continue')
        )
        return keyboard
    #----------------------------------------------------------------------- –∫–ª–∞–≤–∞ –∞–¥–º–∏–Ω–∞ - –ø–∏–¥–æ—Ä–∞
    def admin_action(self):
        self.keyboard = types.InlineKeyboardMarkup()
        self.keyboard.add(
            types.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫–∏", callback_data="admin_edit"),
            types.InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∫–æ–π", callback_data="admin_admins")
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="admin_exit")
        )
        return self.keyboard

    def admin_action_edit(self):
        self.keyboard = types.InlineKeyboardMarkup()
        self.keyboard.add(
            types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É", callback_data="admin_edit_add"),
            types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É", callback_data="admon_edit_delete")
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_edit_back")
        )
        return self.keyboard

    def admin_admins(self):
        self.keyboard = types.InlineKeyboardMarkup()
        self.keyboard.add(
            types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_admins_add_admin"),
            types.InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏—è - 2 ", callback_data="admin_admins_func_2"),
            types.InlineKeyboardButton(text="–§—É–Ω–∫—Ü–∏—è - 3 ", callback_data="admin_admins_delete_func_3")
        )
        self.keyboard.add(
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_edit_back")
        )
        return self.keyboard

# ----- –≤–æ—Ç —ç—Ç–∞ —Ö—É–π–Ω—è - —ç—Ç–æ —Ç–∏–ø –¥–ª—è –∫–ª–∞–≤–∏—É—Ç–∞—Ä—ã –≤—ã—à–µ –≤ –∫–ª–∞—Å—Å–µ
inline_board = Keyboards(keyboard=types.InlineKeyboardMarkup())
replay_board = Keyboards(keyboard=types.ReplyKeyboardMarkup())

#–ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    DB = Database("./info/sql.db")
    DB.start_db(user_id=user_id, first_name=first_name, last_name=last_name)
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {}. "
                                           "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –±–æ–ª–µ–µ —Å–µ–º–∏:".format(
        first_name), reply_markup=inline_board.user_first_menu())


@bot.callback_query_handler(func=lambda call: 'key' in call.data)
def get_choice(callback):
    user_id = callback.from_user.id
    category = callback.data
    DB = Database("./info/sql.db")
    user_category_check_list = DB.theme_choises(user_id=user_id)[1]
    try:
        if len(user_category_check_list) >= 7:
            bot.answer_callback_query(callback.id, text='–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º–∞—Ç–∏–∫ü§∑‚Äç‚ôÇ') #–¥–∞–ª–µ–µ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–∫—Å—Ç —Å—Ç–µ–ø —Ö–µ–Ω–¥–ª–µ—Ä–∞
        elif len(user_category_check_list) < 7:
            if callback.data in user_category_check_list:
                bot.answer_callback_query(callback.id, text='–í—ã —É–∂–µ –≤—ã–±–∏—Ä–∞–ª–∏ —ç—Ç—É —Ç–µ–º–∞—Ç–∏–∫—É‚ùå\n–î–∞–ª–µ–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ–µ –∏–∑–º–µ–Ω–∏—Ç—åüëå')
            elif callback.data not in user_category_check_list:
                DB.theme_write_in_data(category=category, user_id=user_id)
                bot.answer_callback_query(callback.id, text='–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ')
    except IndexError:
        DB.theme_write_in_data(category=category, user_id=user_id)
        bot.answer_callback_query(callback.id, text='–í–∞—à –≤—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω‚úÖ')

@bot.callback_query_handler(func=lambda call: 'step' in call.data)
def user_steps(callback):
    user_id = callback.from_user.id
    DB = Database("./info/sql.db")
    count = len(DB.theme_choises(user_id=user_id)[0])
    theme_choises = DB.theme_choises(user_id=user_id)[0]
    nes_subscription = DB.necessary_subscription(user_id=user_id)
    names = DB.give_web_and_name_for_subscriptions(user_id=user_id)[0]
    web = DB.give_web_and_name_for_subscriptions(user_id=user_id)[1]
    if callback.data == 'first_step_continue':
        if count < 1:
            bot.answer_callback_query(callback.id, '‚ùå–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º–∞—Ç–∏–∫—É!')
        elif count >= 1:
            bot.delete_message(callback.message.chat.id, callback.message.message_id)
            bot.send_message(callback.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ {} —Ç–µ–º–∞—Ç–∏–∫(–∏):\n{}\n'
                                                   '\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–µ—Å–µ–¥–∫–∞–º\t'
                                                   '–ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º: \n\n{}'.format(count, ', '.join(theme_choises), '\n'.join(nes_subscription)),
                                                    disable_web_page_preview=True, reply_markup=inline_board.user_second_menu())

    if callback.data == 'second_step_continue':
        chat_ids = DB.get_chat_id_by_check_subscription(user_id=user_id)
        user_list = []
        for chat_id in chat_ids:
            try:
                podpiska = requests.get('https://api.telegram.org/bot%s/getChatMember?chat_id=%d&user_id=%d' %(token, chat_id ,user_id)).json()
                r = dict(podpiska)['result']['status']
                user_list.append(r)
            except:
                print("error")
        if 'left' not in user_list and 'member' in user_list:
            bot.send_message(callback.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è!‚úÖ\n–í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:',
                            reply_markup=inline_board.hypersilki(names=names, web=web))
            bot.delete_message(callback.message.chat.id, callback.message.message_id)

        elif 'left' in user_list:
            bot.answer_callback_query(callback.id, "‚ùå–í—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã!")

    if callback.data == 'second_step_back':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã:\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–±—Ä–∞–ª–∏: \n{}'.format(', '.join(theme_choises)), reply_markup=inline_board.user_second_back_choice())
    if callback.data == 'second_step_back_add':
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö:", reply_markup=inline_board.user_first_menu())
    if callback.data == 'second_step_back_delete':
        DB.delete_categories(user_id=user_id)
        theme_choises = DB.theme_choises(user_id=user_id)[0]
        bot.answer_callback_query(callback.id, '–í—ã —É–¥–∞–ª–∏–ª–∏ –≤—Å–µ —Ç–µ–º–∞—Ç–∏–∫–∏. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º–∞—Ç–∏–∫–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å!')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã:\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤—ã–±—Ä–∞–ª–∏: \n{}'.format(', '.join(theme_choises)), reply_markup=inline_board.user_second_back_choice())
    if callback.data == 'hyper_step_full':
        bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=inline_board.hypersilki_full(names=names, web=web))

#–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è —Ç—É—Ç, –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ - —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º–∞—Ç–∏–∫. –ö–æ—Ä–æ—á–µ, –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–µ–Ω–æ.

#----------------------------------------–î–ª—è –ê–¥–º–∏–Ω–æ–≤--------------------------------------------------------------#

#—Å–∞–º–æ–µ —Å–ª–æ–∂–Ω–æ - —Ä–µ–¥–∞–∫—Ç–æ—Ä –∞–¥–º–∏–Ω–æ–≤, –Ω–æ —Å —Ç–µ–∫—É—â–µ–π –ë–î —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è)

class AdminAddCategory:
    def __init__(self, database="./info/sql.db"):
        self.connection = sqlite3.connect(database)
        self.cursor = self.connection.cursor()

    def categoryId(self):
        admin_list = {}
        self.cursor.execute('SELECT Id FROM admin_categories')
        for line in self.cursor:
            admin_list[line[0]] = {}
            admin_list[line[0]]['Id'] = line[0]
        return list(dict.keys(admin_list))[-1]

    def admin_add_new_category(self, category_name):
        calldata = 'key' + (self.categoryId() + 1)
        self.cursor.execute('INSERT OR IGNORE INTO admin_categories (CategoryName, CallbackData) VALUES (%s, %s)' %(category_name, calldata))

    def admin_add_new_subscription(self, theme_name, groups):
        self.cursor.execute('INSERT OR IGNORE INTO subscriptions (theme_name, groups) VALUES (%s, %s)' % (theme_name, groups))

    def admin_add_new_fandom(self, fandom_id, fandom_name, fandom_web):
        self.cursor.execute('INSERT OR IGNORE INTO fandoms (fandom_id, fandom_name, fandom) VALUES (%d, %s, %s)' % (fandom_id, fandom_name, fandom_web))

    def save(self):
        self.connection.commit()

# –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –±–æ—Ç–µ
@bot.message_handler(commands=['admin'])
def admin_pass(message):
    DB = Database("./info/sql.db")
    admin_list_id = DB.admin_check()
    if message.from_user.id not in admin_list_id:
        bot.send_message(message.chat.id, '–û—à–∏–±—Å—è –∫–æ–º–∞–Ω–¥–æ–π, —Ç—ã –Ω–µ –∞–¥–º–∏–Ω %s' %message.from_user.first_name)
    else:
        msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Ç–µ–ø–µ—Ä—å –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Å—è :)")
        bot.register_next_step_handler(msg, admin_login_password)

#--–∑–∞–∫–æ–Ω—á–∏–ª –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ - —Ñ—É–Ω–∫—Ü–∏—è —Ç—É—Ç. –°–∫—Ä–∏–ø—Ç –ë–î —Ç–∞–º
def admin_login_password(message):
    user_id = message.from_user.id
    data = message.text.split()  #—Å–ø–∏—Å–æ–∫ ['–ª–æ–≥–∏–Ω', '–ø–∞—Ä–æ–ª—å']
    DB = Database("./info/sql.db")
    check = DB.admin_login_password_check(user_id=user_id)
    try:
        if data[0] == check['login'] and data[1] == check['password']:
            bot.send_message(message.from_user.id, '–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?', reply_markup=inline_board.admin_action())
        else:  # –µ—Å–ª–∏ —Ç–∞–∫–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∂–¥—ë–º –∫–æ–º–∞–Ω–¥—ã /start –û–ø—è—Ç—å
            msg = bot.send_message(message.from_user.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω –ª–æ–≥–∏–Ω\–ø–∞—Ä–æ–ª—å')
            bot.register_next_step_handler(msg, admin_login_password)
    except IndexError:
        msg = bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å –≤ —Å—Ç—Ä–æ—á–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
        bot.register_next_step_handler(msg, admin_login_password)

@bot.callback_query_handler(func=lambda call: 'admin' in call.data)
def admin_button(callback):
    if callback.data == "admin_edit":
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                              text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=inline_board.admin_action_edit())
    if callback.data == "admin_edit_add":
        bot.send_message(callback.message.chat.id, '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
        # if callback.data == "admin_edit_delete":
    if callback.data == "admin_edit_back":
       bot.edit_message_text('–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id, reply_markup=inline_board.admin_action())
    if callback.data == "admin_exit":
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text="–ü–æ–∫–∞!")
    if callback.data == "admin_admins":
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                              text="–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=inline_board.admin_admins())
    if callback.data == "admin_admins_add_admin":
        msg = bot.send_message(callback.message.chat.id,
                               """
–í–≤–µ–¥–∏—Ç–µ TelegramID, –õ–æ–≥–∏–Ω –∏ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ TelegramID/Login/Password.
–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–∞–º –±—É–¥—É—â–∏–º –∞–¥–º–∏–Ω–æ–º –∑–∞—Ä–∞–Ω–µ–µ.
               
–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–π–¥–∏, –±—É–¥—É—â–∏–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º @userinfobot
""")
        bot.register_next_step_handler(msg, admin_register) #–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤ –Ω–∏–∂–Ω—é—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
         #—Ñ—É–Ω–∫—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∞
    #if callback.data == "admin_admins_func_2":
    #if callback.data == "admin_admins_func_3"
    #if callback.data == "admin_admins_back":

def admin_register(message):
    DB = Database("./info/sql.db")
    txt = message.text.split('/')
    try:
        userID, login, password = (int(txt[0]), txt[1], txt[2])
        DB.admin_add(userID=userID, login=login, password=password)
        bot.send_message(message.chat.id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    except IndexError:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ \"/\"')


    #if confirm_password == password:
        #DB.admin_add(userID=userID, login=login, password=password)
        #bot.edit_message_text(message.chat.id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω‚úÖ')
    #else:
        #msg = bot.send_message(message.from_user.id, '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–≤–æ–ø–∞–¥–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑‚ùå')
        #bot.register_next_step_handler(msg, admin_register(message))
#--------------------–ü–£–°–ö!
bot.polling(none_stop=True, interval=0)
